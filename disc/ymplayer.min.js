var than = 5;

YmplayerIniter = function() {
    if (ymplayer = document.getElementsByTagName("ymplayer"), 0 != ymplayer.length) for (var a = 0; a < ymplayer.length; a++) {
        if (tempSrc = ymplayer[a].attributes.src.value, tempID = ymplayer[a].getAttribute("name"), 
        artist = ymplayer[a].getAttribute("artist"), song = ymplayer[a].getAttribute("song"), 
        cover = ymplayer[a].getAttribute("cover"), audioEle = document.createElement("audio"), 
        ymplayer[a].setAttribute("init", "no"), audioEle.setAttribute("id", tempID), audioEle.setAttribute("src", tempSrc), 
        audioEle.setAttribute("preload", "no"), proEle = document.createElement("div"), 
        proEle.setAttribute("class", "ym-progress"), proEle.id = tempID + "-progress", proEle.innerHTML = '<div class="ym-progress-handler"><span class="current-time">00:00</span><div class="ym-pgbar"  onclick="Ymplayer.Skip(' + tempID + ',event)"><div class="ym-played"><span class="ym-circle"></span></div></div>' + '<span class="duration-time">00:00</span></div>', 
        conEle = document.createElement("div"), conEle.setAttribute("class", "player-container"), 
        coverEle = document.createElement("div"), coverEle.setAttribute("class", "ym-songinfo"), 
        coverEle.innerHTML = '<div class="ym-cover-image"></div><div class="ym-song-detail"><p class="ym-song">' + song + '</p><p class="ym-artist">' + artist + "</p></div>", 
        coverEle.getElementsByClassName("ym-cover-image")[0].style.backgroundImage = "url(" + cover + ")", 
        ctEle = document.createElement("div"), ctEle.setAttribute("class", "ym-controller"), 
        ctEle.id = tempID + "-controller", ctEle.innerHTML = '<div class="ym-play-status"><a class="play-button ymbtn" href="javascript:;" onclick="Ymplayer.Play(\'' + tempID + "')\"><i class='fa fa-play'></i></a>\n" + '<a class="stop-button ymbtn"  href="javascript:;" onclick="Ymplayer.Stop(\'' + tempID + '\')"><i class="fa fa-stop"></i></a>\n' + '<a class="loop-button ymbtn"  href="javascript:;" onclick="Ymplayer.Loop(\'' + tempID + '\')"><i class="fa fa-refresh"></i></a>\n' + '<a class="lyric-button ymbtn"  href="javascript:;" onclick="Ymplayer.LrcBox(\'' + tempID + '\')"><i class="fa fa-file-text"></i></a>\n' + '<a class="vol-button ymbtn"  href="javascript:;" onclick="Ymplayer.Novol(\'' + tempID + '\')"><i class="fa fa-volume-down"></i></a></div>\n' + '<div class="volume-bar" onclick="Ymplayer.ChangeVol(' + tempID + ',event)"><div class="volume-current"><span class="ym-circle"></span></div></div>', 
        conEle.appendChild(coverEle), conEle.appendChild(ctEle), ymplayer[a].appendChild(audioEle), 
        lrcbox = document.createElement("div"), lrcbox.id = tempID + "lrcbox", lrcbox.setAttribute("class", "ym-lrcbox"), 
        lrcbox.innerHTML = '<div class="lrc-container"></div>', lrcContainer = lrcbox.getElementsByClassName("lrc-container")[0], 
        lrc = ymplayer[a].getElementsByTagName("lrc"), "null" != typeof lrc && 0 != lrc.length) {
            lyric = lrc[0].innerHTML, lyric = lyric.replace(/(\\n)/g, "\n"), lyric = lyric.split("\n"), 
            timeline = Array(), lrcContent = Array();
            for (var b in lyric) lyric[b].match(/(ti:|ar:)/) || "" != lyric[b] && (tempLrc = lyric[b].match(/([0-9]{2})\:([0-9]{2}\.[0-9]{2})/), 
            tempContent = lyric[b].match(/\[.*?\](.*?)$/), null != typeof tempLrc && (minute = 60 * tempLrc[1], 
            sec = minute + parseFloat(tempLrc[2]), lrcEle = document.createElement("lyric"), 
            lrcEle.setAttribute("timeline", sec), lrcEle.innerHTML = "<p>" + tempContent[1] + "</p>", 
            lrcContainer.appendChild(lrcEle)));
            ymplayer[a].setAttribute("currentLrc", 0);
        } else lrcEle = document.createElement("lyric"), lrcEle.setAttribute("timeline", 0), 
        lrcEle.innerHTML = "<p>404 Not Found </p><p> 看来这首歌是没有填词的纯音乐……</p> <p> 或者说歌词没有被填写。 </p>", 
        lrcContainer.appendChild(lrcEle);
        ymplayer[a].appendChild(lrcbox), ymplayer[a].appendChild(proEle), ymplayer[a].appendChild(conEle), 
        lrc = ymplayer[a].getElementsByTagName("lrc");
    }
};

var Ymplayer = new Object();

Ymplayer.Play = function(a) {
    audioElement = document.getElementById(a), 0 != audioElement.paused ? (audioElement.play(), 
    btn = document.getElementById(a + "-controller").getElementsByClassName("play-button"), 
    btn[0].innerHTML = '<i class="fa fa-pause"></i>', par = audioElement.parentNode, 
    "no" == par.getAttribute("init") && (setInterval("Ymplayer.Change(" + a + ")", 1e3), 
    currentTime = audioElement.currentTime, duration = "0" + parseInt(audioElement.duration / 60) + ":", 
    inter = parseInt(audioElement.duration - 60 * parseInt(audioElement.duration / 60)), 
    10 > inter && (inter = "0" + inter), duration += inter, par.getElementsByClassName("duration-time")[0].innerHTML = duration), 
    null != par.getAttribute("currentLrc") && setInterval(function() {
        Ymplayer.Lrc(a);
    }, 20)) :(audioElement.pause(), btn = document.getElementById(a + "-controller").getElementsByClassName("play-button"), 
    btn[0].innerHTML = '<i class="fa fa-play"></i>');
}, Ymplayer.Stop = function(a) {
    audioElement = document.getElementById(a), parent = audioElement.parentNode, audioElement.pause(), 
    audioElement.currentTime = 0, btn = document.getElementById(a + "-controller").getElementsByClassName("play-button"), 
    btn[0].innerHTML = '<i class="fa fa-play"></i>', parent.getElementsByClassName("ym-played")[0].style.width = "0%";
}, Ymplayer.Loop = function(a) {
    audioElement = document.getElementById(a), ymParent = audioElement.parentNode, loopbtn = document.getElementById(a + "-controller").getElementsByClassName("loop-button")[0], 
    "no" == ymParent.getAttribute("loop") ? (ymParent.setAttribute("loop", "yes"), addClass(loopbtn, "looping")) :(ymParent.setAttribute("loop", "no"), 
    removeClass(loopbtn, "looping"));
}, Ymplayer.Change = function(a) {
    return ae = "object" == typeof a ? a :document.getElementById(a), ae.currentTime == ae.duration ? ("yes" == ae.parentNode.getAttribute("loop") && (ae.currentTime = 0, 
    ae.parentNode.setAttribute("currentLrc", 0), ae.parentNode.getElementsByClassName("lrc-container")[0].style.margin = "0px"), 
    void 0) :(now = ae.currentTime / ae.duration, percent = 100 * now + "%", current = "0" + parseInt(ae.currentTime / 60) + ":", 
    inter = parseInt(ae.currentTime - 60 * parseInt(ae.currentTime / 60)), 10 > inter && (inter = "0" + inter), 
    current += inter, ae.parentNode.getElementsByClassName("ym-played")[0].style.width = percent, 
    ae.parentNode.getElementsByClassName("current-time")[0].innerHTML = current, void 0);
}, Ymplayer.LrcBox = function(a) {
    audioElement = "object" == typeof a ? a :document.getElementById(a), player = audioElement.parentNode, 
    lrcbox = player.getElementsByClassName("ym-lrcbox")[0], "showed" != player.getAttribute("inited") ? (player.style.height = "400px", 
    lrcbox.style.height = "290px", player.setAttribute("inited", "showed")) :(player.style.height = "120px", 
    lrcbox.style.height = "0px", player.setAttribute("inited", "hidden"));
}, Ymplayer.Skip = function(a,event) {
    a = audioElement = "object" == typeof a ? a :document.getElementById(a), pbarEle = audioElement.parentNode.getElementsByClassName("ym-pgbar")[0], 
    playedEle = audioElement.parentNode.getElementsByClassName("ym-played")[0], clickarea = event.clientX, 
    awayleft = audioElement.parentNode.offsetLeft + pbarEle.offsetLeft, divwidth = pbarEle.offsetWidth, 
    clickwidth = clickarea - awayleft, pro = clickwidth / divwidth, a.currentTime = a.duration * pro, 
    propercent = 100 * pro + "%", playedEle.style.width = propercent;
}, Ymplayer.ChangeVol = function(a,event) {
    a = audioElement = "object" == typeof a ? a :document.getElementById(a), barEle = audioElement.parentNode.getElementsByClassName("volume-bar")[0], 
    currentEle = audioElement.parentNode.getElementsByClassName("volume-current")[0], 
    clickarea = event.clientX, awayleft = getRect(barEle).left, divwidth = barEle.offsetWidth, 
    clickwidth = clickarea - awayleft, pro = clickwidth / divwidth, pro > 1 && (pro = 1), 
    a.volume = pro, propercent = 100 * pro + "%", currentEle.style.width = propercent;
}, Ymplayer.Novol = function(a) {
    a = document.getElementById(a), 0 == a.volume ? (a.volume = 1, btn = a.parentNode.getElementsByClassName("vol-button"), 
    btn[0].innerHTML = '<i class="fa fa-volume-down"></i>') :(a.volume = 0, btn = a.parentNode.getElementsByClassName("vol-button"), 
    btn[0].innerHTML = '<i class="fa fa-volume-off"></i>');
}, Ymplayer.Lrc = function(a) {
    if (audioElement = document.getElementById(a), parent = audioElement.parentNode, 
    0 == audioElement.paused) {
        if (time = audioElement.currentTime, all = audioElement.duration, lrcEle = parent.getElementsByTagName("lyric"), 
        long = lrcEle.length, currentLrc = parseInt(parent.getAttribute("currentLrc")), 
        lrccontainer = parent.getElementsByClassName("lrc-container")[0], time > lrcEle[long - 1].getAttribute("timeline")) return !1;
        if (time >= lrcEle[currentLrc].getAttribute("timeline")) {
            if (long - 1 > currentLrc && time > lrcEle[parseInt(currentLrc) + 1].getAttribute("timeline")) {
                if (active = lrccontainer.getElementsByClassName("ym-active"), "null" != typeof active) for (leng = active.length, 
                o = 0; leng > o; ) removeClass(active[o], "ym-active"), o++;
                for (var b = 0 in lrcEle) time > lrcEle[currentLrc].getAttribute("timeline") ? b++ :(marginHeight = lrcEle[than - 1].offsetTop - lrcEle[currentLrc].offsetTop, 
                lrccontainer.style.marginTop = marginHeight + "px", parent.setAttribute("currentLrc", b), 
                Ymplayer.Lrc(a));
            }
            0 != currentLrc && removeClass(lrcEle[currentLrc - 1], "ym-active"), addClass(lrcEle[currentLrc], "ym-active"), 
            currentLrc >= than && (marginHeight = lrcEle[than - 1].offsetTop - lrcEle[currentLrc].offsetTop, 
            lrccontainer.style.marginTop = marginHeight + "px"), parent.setAttribute("currentLrc", currentLrc + 1);
        } else if (0 != currentLrc && time < lrcEle[currentLrc - 1].getAttribute("timeline")) {
            if (active = lrccontainer.getElementsByClassName("ym-active"), "null" != typeof active) for (leng = active.length, 
            o = 0; leng > o; ) removeClass(active[o], "ym-active"), o++;
            for (var c = 0 in lrcEle) {
                if (time < lrcEle[0].getAttribute("timeline")) {
                    lrccontainer.style.marginTop = "0px";
                    break;
                }
                if (time > lrcEle[c].getAttribute("timeline")) {
                    than >= c ? lrccontainer.style.marginTop = "0px" :(marginHeight = lrcEle[than - 1].offsetTop - lrcEle[currentLrc].offsetTop, 
                    lrccontainer.style.marginTop = marginHeight + "px"), addClass(lrcEle[c], "ym-active"), 
                    parent.setAttribute("currentLrc", c), Ymplayer.Lrc(a);
                    break;
                }
                c++;
            }
        }
    }
};

function hasClass(a, b) {
    return a.className.match(new RegExp("(\\s|^)" + b + "(\\s|$)"));
}

function addClass(a, b) {
    this.hasClass(a, b) || (a.className += " " + b);
}

function removeClass(a, b) {
    if (hasClass(a, b)) {
        var c = new RegExp("(\\s|^)" + b + "(\\s|$)");
        a.className = a.className.replace(c, " ");
    }
}

function getRect(a) {
    var b = a.getBoundingClientRect(), c = document.documentElement.clientTop, d = document.documentElement.clientLeft;
    return {
        top:b.top - c,
        bottom:b.bottom - c,
        left:b.left - d,
        right:b.right - d
    };
}

window.onload = function() {
    YmplayerIniter();
};
